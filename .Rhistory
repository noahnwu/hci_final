#simulates diabetes data
library(tidyverse)
patient_no = 1500
beta_dist = rbeta(10000,2,5)
diabetes = data.frame(patient_id = 1:patient_no,
hba1c_normal = sample(c("Normal", "Abnormal"),
size = patient_no,
replace = T,
prob = c(0.3, 0.7)))
diabetes$hba1c_value = sapply(diabetes$hba1c_normal, function(x) {
if(x == "Normal") {
round(sample(seq(4, 5.6, 0.1) + sample(seq(0, 0.1, 0.01), size = 1), size = 1), digits = 2)
} else {
round(5.6 + 10*sample(beta_dist, size = 1), digits = 2)
}
})
diabetes$hba1c_months_ago = rnorm(patient_no, 9, 2)
diabetes$foot_exam_result = sample(c("Ulcers", "No Ulcers"), size = patient_no,
prob = c(0.1, 0.9), replace = T)
diabetes$foot_exam_months_ago = diabetes$hba1c_months_ago
diabetes = diabetes %>%  mutate(foot_exam_past_due = ifelse(diabetes_foot_exam_months_ago > 6,
"Past Due", "Not Due"),
hba1c_past_due = ifelse(hba1c_months_ago > 3,
"Past Due", "Not Due"))
write_csv(diabetes, "diabetes_dataset.csv")
#simulates diabetes data
library(tidyverse)
patient_no = 1500
beta_dist = rbeta(10000,2,5)
diabetes = data.frame(patient_id = 1:patient_no,
hba1c_normal = sample(c("Normal", "Abnormal"),
size = patient_no,
replace = T,
prob = c(0.3, 0.7)))
diabetes$hba1c_value = sapply(diabetes$hba1c_normal, function(x) {
if(x == "Normal") {
round(sample(seq(4, 5.6, 0.1) + sample(seq(0, 0.1, 0.01), size = 1), size = 1), digits = 2)
} else {
round(5.6 + 10*sample(beta_dist, size = 1), digits = 2)
}
})
diabetes$hba1c_months_ago = rnorm(patient_no, 9, 2)
diabetes$foot_exam_result = sample(c("Ulcers", "No Ulcers"), size = patient_no,
prob = c(0.1, 0.9), replace = T)
diabetes$foot_exam_months_ago = diabetes$hba1c_months_ago
diabetes = diabetes %>%  mutate(foot_exam_past_due = ifelse(foot_exam_months_ago > 6,
"Past Due", "Not Due"),
hba1c_past_due = ifelse(hba1c_months_ago > 3,
"Past Due", "Not Due"))
write_csv(diabetes, "diabetes_dataset.csv")
View(diabetes)
library(shiny)
library(tidyverse)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(diabetes)
runApp()
View(diabetes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
diabetes = read_csv("diabetes_dataset.csv")
View(diabetes)
runApp()
runApp()
runApp()
runApp()
runApp()
table(diabetes$hba1c_past_due)
runApp()
#simulates diabetes data
library(tidyverse)
patient_no = 1500
beta_dist = rbeta(10000,2,5)
diabetes = data.frame(patient_id = 1:patient_no,
hba1c_normal = sample(c("Normal", "Abnormal"),
size = patient_no,
replace = T,
prob = c(0.3, 0.7)))
diabetes$hba1c_value = sapply(diabetes$hba1c_normal, function(x) {
if(x == "Normal") {
round(sample(seq(4, 5.6, 0.1) + sample(seq(0, 0.1, 0.01), size = 1), size = 1), digits = 2)
} else {
round(5.6 + 10*sample(beta_dist, size = 1), digits = 2)
}
})
diabetes$hba1c_months_ago = rnorm(patient_no, 8, 2)
diabetes$foot_exam_result = sample(c("Ulcers", "No Ulcers"), size = patient_no,
prob = c(0.1, 0.9), replace = T)
diabetes$foot_exam_months_ago = diabetes$hba1c_months_ago
diabetes = diabetes %>%  mutate(foot_exam_past_due = ifelse(diabetes_foot_exam_months_ago > 6,
"Past Due", "Not Due"),
hba1c_past_due = ifelse(hba1c_months_ago > 3,
"Past Due", "Not Due"))
write_csv(diabetes, "diabetes_dataset.csv")
#simulates diabetes data
library(tidyverse)
patient_no = 1500
beta_dist = rbeta(10000,2,5)
diabetes = data.frame(patient_id = 1:patient_no,
hba1c_normal = sample(c("Normal", "Abnormal"),
size = patient_no,
replace = T,
prob = c(0.3, 0.7)))
diabetes$hba1c_value = sapply(diabetes$hba1c_normal, function(x) {
if(x == "Normal") {
round(sample(seq(4, 5.6, 0.1) + sample(seq(0, 0.1, 0.01), size = 1), size = 1), digits = 2)
} else {
round(5.6 + 10*sample(beta_dist, size = 1), digits = 2)
}
})
diabetes$hba1c_months_ago = rnorm(patient_no, 8, 2)
diabetes$foot_exam_result = sample(c("Ulcers", "No Ulcers"), size = patient_no,
prob = c(0.1, 0.9), replace = T)
diabetes$foot_exam_months_ago = diabetes$hba1c_months_ago
diabetes = diabetes %>%  mutate(foot_exam_past_due = ifelse(diabetes_foot_exam_months_ago > 6,
"Past Due", "Not Due"),
hba1c_past_due = ifelse(hba1c_months_ago > 3,
"Past Due", "Not Due"))
write_csv(diabetes, "diabetes_dataset.csv")
#simulates diabetes data
library(tidyverse)
patient_no = 1500
beta_dist = rbeta(10000,2,5)
diabetes = data.frame(patient_id = 1:patient_no,
hba1c_normal = sample(c("Normal", "Abnormal"),
size = patient_no,
replace = T,
prob = c(0.3, 0.7)))
diabetes$hba1c_value = sapply(diabetes$hba1c_normal, function(x) {
if(x == "Normal") {
round(sample(seq(4, 5.6, 0.1) + sample(seq(0, 0.1, 0.01), size = 1), size = 1), digits = 2)
} else {
round(5.6 + 10*sample(beta_dist, size = 1), digits = 2)
}
})
diabetes$hba1c_months_ago = rnorm(patient_no, 8, 2)
diabetes$foot_exam_result = sample(c("Ulcers", "No Ulcers"), size = patient_no,
prob = c(0.1, 0.9), replace = T)
diabetes$foot_exam_months_ago = diabetes$hba1c_months_ago
diabetes = diabetes %>%  mutate(foot_exam_past_due = ifelse(foot_exam_months_ago > 6,
"Past Due", "Not Due"),
hba1c_past_due = ifelse(hba1c_months_ago > 3,
"Past Due", "Not Due"))
write_csv(diabetes, "diabetes_dataset.csv")
min(diabetes$hba1c_months_ago)
#simulates diabetes data
library(tidyverse)
patient_no = 1500
beta_dist = rbeta(10000,2,5)
diabetes = data.frame(patient_id = 1:patient_no,
hba1c_normal = sample(c("Normal", "Abnormal"),
size = patient_no,
replace = T,
prob = c(0.3, 0.7)))
diabetes$hba1c_value = sapply(diabetes$hba1c_normal, function(x) {
if(x == "Normal") {
round(sample(seq(4, 5.6, 0.1) + sample(seq(0, 0.1, 0.01), size = 1), size = 1), digits = 2)
} else {
round(5.6 + 10*sample(beta_dist, size = 1), digits = 2)
}
})
diabetes$hba1c_months_ago = rnorm(patient_no, 8, 2)
diabetes$foot_exam_result = sample(c("Ulcers", "No Ulcers"), size = patient_no,
prob = c(0.1, 0.9), replace = T)
diabetes$foot_exam_months_ago = diabetes$hba1c_months_ago
diabetes = diabetes %>%  mutate(foot_exam_past_due = ifelse(foot_exam_months_ago > 6,
"Past Due", "Not Due"),
hba1c_past_due = ifelse(hba1c_months_ago > 3,
"Past Due", "Not Due"))
write_csv(diabetes, "diabetes_dataset.csv")
min(diabetes$hba1c_months_ago)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
#test page here.
# from Noah: will make simulated data this week.
library(shiny)
library(tidyverse)
diabetes = read_csv("diabetes_dataset.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Provider Dashboard"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
#only diabetes works right now
selectInput("dz",
"What disease process?",
choices = list("Diabetes",
"Heart Failure")),
conditionalPanel(
condition = "input.dz == 'Diabetes'",
selectInput("diabetes_drop",
"Which diabetes-related condition/lab?",
choices = as.list(names(diabetes)[!str_detect(names(diabetes), "id$")])
),
conditionalPanel(
condition = "input.dz == 'Diabetes'",
radioButtons('due_filters',
"Label Plot by Vital Due Dates",
as.list(names(diabetes)[str_detect(names(diabetes), "due")]))
)
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("condition_plot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$condition_plot <- renderPlot({
if(input$dz == "Diabetes") {
if(class(diabetes %>% pull(input$diabetes_drop)) == "character") {
#categorical variables
temp = diabetes %>%
group_by(across(all_of(c(input$diabetes_drop, input$due_filters)))) %>%
count()
ggplot(temp, aes_string(input$diabetes_drop, "n",
fill = input$due_filters))+
geom_col(color = "black")+
theme_bw()+
labs(x = "Values",
y = "N",
title = input$diabetes_drop)
} else{
ggplot(diabetes, aes_string(input$diabetes_drop, fill = input$due_filters))+
geom_histogram(color = "black")+
theme_bw()+
labs(title = paste0(input$diabetes_drop))
}
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
