last_test = ymd(NA))
normal_sample = rnorm(10000, mean = 4, sd = 2)
normal_sample = normal_sample[normal_sample > 2]
abnormal_sample = rnorm(10000, mean = 8, sd = 2)
abnormal_sample = abnormal_sample[abnormal_sample > 5]
diabetes_time = vector("list", length(date_range))
for(i in 1:length(date_range)) {
cat(i, "of", length(date_range), "\n")
temp_data = data.frame()
for(j in 1:length(patients_due$patient_id)) {
#change to "Due" if more than 90 days have passed without a test
if(patients_due$due[j] != "Due" & !is.na(patients_due$last_test[j])) {
if(as.numeric(date_range[i] - patients_due$last_test[j]) >= 90) {
patients_due[j] = "Due"
}
}
if(patients_due$due[j] == "Due") {
test = sample(c(0, 1), size  = 1)
#50/50 chance that any patient received a test
if(test == 1) {
if(patients_due$ab[j] == "Normal") {
a1c = sample(normal_sample, size = 1)
} else{
a1c = sample(abnormal_sample, size = 1)
}
temp = data.frame(patient_id = patients_due$patient_id[j],
test_date = ymd(paste0(year(date_range[i]), "-",
month(date_range[i]), "-",
sample(1:28, size = 1))),
a1c_value = a1c
)
temp_data = bind_rows(temp_data,
temp)
patients_due$due[j] = "Not Due"
patients_due$last_test[j] = temp$test_date[1]
} else {
next
}
} else {
next
}
}
diabetes_time[[i]] = temp_data
}
rlang::trace_back()
rm(x)
df_start = ymd("2017-01-01")
df_end = ymd("2022-05-26")
date_range = seq.Date(df_start, df_end, by = "month")
patients_due = data.frame(patient_id = diabetes$patient_id,
ab = diabetes$hba1c_normal,
due = "Due",
last_test = ymd(NA))
normal_sample = rnorm(10000, mean = 4, sd = 2)
normal_sample = normal_sample[normal_sample > 2]
abnormal_sample = rnorm(10000, mean = 8, sd = 2)
abnormal_sample = abnormal_sample[abnormal_sample > 5]
diabetes_time = vector("list", length(date_range))
for(i in 1:length(date_range)) {
cat(i, "of", length(date_range), "\n")
month_data = data.frame()
for(j in 1:length(patients_due$patient_id)) {
#change to "Due" if more than 90 days have passed without a test
if(patients_due$due[j] != "Due" & !is.na(patients_due$last_test[j])) {
if(as.numeric(date_range[i] - patients_due$last_test[j]) >= 90) {
patients_due[j] = "Due"
}
}
if(patients_due$due[j] == "Due") {
test = sample(c(0, 1), size  = 1)
#50/50 chance that any patient received a test
if(test == 1) {
if(patients_due$ab[j] == "Normal") {
a1c = sample(normal_sample, size = 1)
} else{
a1c = sample(abnormal_sample, size = 1)
}
temp = data.frame(patient_id = patients_due$patient_id[j],
test_date = ymd(paste0(year(date_range[i]), "-",
month(date_range[i]), "-",
sample(1:28, size = 1))),
a1c_value = a1c
)
month_data = bind_rows(month_data,
temp)
patients_due$due[j] = "Not Due"
patients_due$last_test[j] = temp$test_date[1]
} else {
next
}
} else {
next
}
}
diabetes_time[[i]] = temp_data
}
temp$test_date
class(temp$test_date)
df_start = ymd("2017-01-01")
df_end = ymd("2022-05-26")
date_range = seq.Date(df_start, df_end, by = "month")
patients_due = data.frame(patient_id = diabetes$patient_id,
ab = diabetes$hba1c_normal,
due = "Due",
last_test = ymd(NA))
normal_sample = rnorm(10000, mean = 4, sd = 2)
normal_sample = normal_sample[normal_sample > 2]
abnormal_sample = rnorm(10000, mean = 8, sd = 2)
abnormal_sample = abnormal_sample[abnormal_sample > 5]
diabetes_time = vector("list", length(date_range))
for(i in 1:length(date_range)) {
cat(i, "of", length(date_range), "\n")
month_data = data.frame()
for(j in 1:length(patients_due$patient_id)) {
#change to "Due" if more than 90 days have passed without a test
if(patients_due$due[j] != "Due" & !is.na(patients_due$last_test[j])) {
if(as.numeric(date_range[i] - patients_due$last_test[j]) >= 90) {
patients_due[j] = "Due"
}
}
if(patients_due$due[j] == "Due") {
test = sample(c(0, 1), size  = 1)
#50/50 chance that any patient received a test
if(test == 1) {
if(patients_due$ab[j] == "Normal") {
a1c = sample(normal_sample, size = 1)
} else{
a1c = sample(abnormal_sample, size = 1)
}
temp = data.frame(patient_id = patients_due$patient_id[j],
test_date = ymd(paste0(year(date_range[i]), "-",
month(date_range[i]), "-",
sample(1:28, size = 1))),
a1c_value = a1c
)
month_data = bind_rows(month_data,
temp)
patients_due$due[j] = "Not Due"
patients_due$last_test[j] = temp$test_date
} else {
next
}
} else {
next
}
}
diabetes_time[[i]] = temp_data
}
df_start = ymd("2017-01-01")
df_end = ymd("2022-05-26")
date_range = seq.Date(df_start, df_end, by = "month")
patients_due = data.frame(patient_id = diabetes$patient_id,
ab = diabetes$hba1c_normal,
due = "Due",
last_test = ymd(NA))
normal_sample = rnorm(10000, mean = 4, sd = 2)
normal_sample = normal_sample[normal_sample > 2]
abnormal_sample = rnorm(10000, mean = 8, sd = 2)
abnormal_sample = abnormal_sample[abnormal_sample > 5]
diabetes_time = vector("list", length(date_range))
for(i in 1:length(date_range)) {
cat(i, "of", length(date_range), "\n")
month_data = tibble()
for(j in 1:length(patients_due$patient_id)) {
#change to "Due" if more than 90 days have passed without a test
if(patients_due$due[j] != "Due" & !is.na(patients_due$last_test[j])) {
if(as.numeric(date_range[i] - patients_due$last_test[j]) >= 90) {
patients_due[j] = "Due"
}
}
if(patients_due$due[j] == "Due") {
test = sample(c(0, 1), size  = 1)
#50/50 chance that any patient received a test
if(test == 1) {
if(patients_due$ab[j] == "Normal") {
a1c = sample(normal_sample, size = 1)
} else{
a1c = sample(abnormal_sample, size = 1)
}
temp = tibble(patient_id = patients_due$patient_id[j],
test_date = ymd(paste0(year(date_range[i]), "-",
month(date_range[i]), "-",
sample(1:28, size = 1))),
a1c_value = a1c
)
month_data = bind_rows(month_data,
temp)
patients_due$due[j] = "Not Due"
patients_due$last_test[j] = temp$test_date
} else {
next
}
} else {
next
}
}
diabetes_time[[i]] = temp_data
}
df_start = ymd("2017-01-01")
df_end = ymd("2022-05-26")
date_range = seq.Date(df_start, df_end, by = "month")
patients_due = data.frame(patient_id = diabetes$patient_id,
ab = diabetes$hba1c_normal,
due = "Due",
last_test = ymd(NA))
normal_sample = rnorm(10000, mean = 4, sd = 2)
normal_sample = normal_sample[normal_sample > 2]
abnormal_sample = rnorm(10000, mean = 8, sd = 2)
abnormal_sample = abnormal_sample[abnormal_sample > 5]
diabetes_time = vector("list", length(date_range))
for(i in 1:length(date_range)) {
cat(i, "of", length(date_range), "\n")
month_data = tibble()
for(j in 1:length(patients_due$patient_id)) {
#change to "Due" if more than 90 days have passed without a test
if(patients_due$due[j] != "Due" & !is.na(patients_due$last_test[j])) {
if(as.numeric(date_range[i] - patients_due$last_test[j]) >= 90) {
patients_due$due[j] = "Due"
}
}
if(patients_due$due[j] == "Due") {
test = sample(c(0, 1), size  = 1)
#50/50 chance that any patient received a test
if(test == 1) {
if(patients_due$ab[j] == "Normal") {
a1c = sample(normal_sample, size = 1)
} else{
a1c = sample(abnormal_sample, size = 1)
}
temp = tibble(patient_id = patients_due$patient_id[j],
test_date = ymd(paste0(year(date_range[i]), "-",
month(date_range[i]), "-",
sample(1:28, size = 1))),
a1c_value = a1c
)
month_data = bind_rows(month_data,
temp)
patients_due$due[j] = "Not Due"
patients_due$last_test[j] = temp$test_date
} else {
next
}
} else {
next
}
}
diabetes_time[[i]] = temp_data
}
diabetes_time = purrr::reduce(diabetes_time, bind_rows)
View(diabetes_time)
View(month_data)
for(i in 1:length(date_range)) {
cat(i, "of", length(date_range), "\n")
month_data = tibble()
for(j in 1:length(patients_due$patient_id)) {
#change to "Due" if more than 90 days have passed without a test
if(patients_due$due[j] != "Due" & !is.na(patients_due$last_test[j])) {
if(as.numeric(date_range[i] - patients_due$last_test[j]) >= 90) {
patients_due$due[j] = "Due"
}
}
if(patients_due$due[j] == "Due") {
test = sample(c(0, 1), size  = 1)
#50/50 chance that any patient received a test
if(test == 1) {
if(patients_due$ab[j] == "Normal") {
a1c = sample(normal_sample, size = 1)
} else{
a1c = sample(abnormal_sample, size = 1)
}
temp = tibble(patient_id = patients_due$patient_id[j],
test_date = ymd(paste0(year(date_range[i]), "-",
month(date_range[i]), "-",
sample(1:28, size = 1))),
a1c_value = a1c
)
month_data = bind_rows(month_data,
temp)
patients_due$due[j] = "Not Due"
patients_due$last_test[j] = temp$test_date
} else {
next
}
} else {
next
}
}
diabetes_time[[i]] = month_data
}
df_start = ymd("2017-01-01")
df_end = ymd("2022-05-26")
date_range = seq.Date(df_start, df_end, by = "month")
patients_due = data.frame(patient_id = diabetes$patient_id,
ab = diabetes$hba1c_normal,
due = "Due",
last_test = ymd(NA))
normal_sample = rnorm(10000, mean = 4, sd = 2)
normal_sample = normal_sample[normal_sample > 2]
abnormal_sample = rnorm(10000, mean = 8, sd = 2)
abnormal_sample = abnormal_sample[abnormal_sample > 5]
diabetes_time = vector("list", length(date_range))
for(i in 1:length(date_range)) {
cat(i, "of", length(date_range), "\n")
month_data = tibble()
for(j in 1:length(patients_due$patient_id)) {
#change to "Due" if more than 90 days have passed without a test
if(patients_due$due[j] != "Due" & !is.na(patients_due$last_test[j])) {
if(as.numeric(date_range[i] - patients_due$last_test[j]) >= 90) {
patients_due$due[j] = "Due"
}
}
if(patients_due$due[j] == "Due") {
test = sample(c(0, 1), size  = 1)
#50/50 chance that any patient received a test
if(test == 1) {
if(patients_due$ab[j] == "Normal") {
a1c = sample(normal_sample, size = 1)
} else{
a1c = sample(abnormal_sample, size = 1)
}
temp = tibble(patient_id = patients_due$patient_id[j],
test_date = ymd(paste0(year(date_range[i]), "-",
month(date_range[i]), "-",
sample(1:28, size = 1))),
a1c_value = a1c
)
month_data = bind_rows(month_data,
temp)
patients_due$due[j] = "Not Due"
patients_due$last_test[j] = temp$test_date
} else {
next
}
} else {
next
}
}
diabetes_time[[i]] = month_data
}
diabetes_time = purrr::reduce(diabetes_time, bind_rows)
View(diabetes_time)
write_csv(diabetes_time, "a1c_time_series.csv ")
write_csv(diabetes_time, "a1c_time_series.csv")
ggplot(diabetes_time)+geom_line(aes(test_date, a1c_value, group = patient_id))
View(diabetes)
test = diabetes_time %>%
left_join(diabetes %>%
select(patient_id, hba1c_normal))
View(test)
diabetes_time = diabetes_time %>%
left_join(diabetes %>%
select(patient_id, hba1c_normal))
write_csv(diabetes_time, "a1c_time_series.csv")
ggplot(diabetes_time)+geom_lin(aes(test_date, a1c_value, group = patient_id, color = hab1c_abnormal), alpha = 0.25)
ggplot(diabetes_time)+geom_line(aes(test_date, a1c_value, group = patient_id, color = hab1c_abnormal), alpha = 0.25)
ggplot(diabetes_time)+geom_line(aes(test_date, a1c_value, group = patient_id, color = hab1c_normal), alpha = 0.25)
View(diabetes_time)
ggplot(diabetes_time)+geom_line(aes(test_date, a1c_value, group = patient_id, color = hba1c_normal), alpha = 0.25)
ggplot(diabetes_time)+geom_line(aes(test_date, a1c_value, group = patient_id, color = hba1c_normal), alpha = 0.25)+facet_wrap(hba1c_normal)
ggplot(diabetes_time)+geom_line(aes(test_date, a1c_value, group = patient_id, color = hba1c_normal), alpha = 0.25)+facet_wrap(~hba1c_normal)
ggplot(diabetes_time)+geom_line(aes(test_date, a1c_value, group = patient_id, color = hba1c_normal), alpha = 0.1)+facet_wrap(~hba1c_normal)
#simulate readmission
readmit = tibble(
patient_id = 1:1500,
readmit_number = rnorm(1500, 6, 1.5)
)
readmit %>% filter(readmit_number < 0)
#simulate readmission
readmit = tibble(
patient_id = 1:1500,
readmit_number = rnorm(1500, 8, 1.5),
)
year_start = ymd(2021-01-01)
year_start = ymd("2021-01-01")
year_end = ymd("2021-12-31")
year_range = seq.Date(year_start, year_end, by = "day")
year_start = ymd("2022-05-01")
year_end = ymd("2022-05-01")
year_range = seq.Date(year_start, year_end, by = "day")
#simulate readmission
readmit = tibble(
patient_id = 1:1500,
readmit_number = rnorm(1500, 8, 1.5),
last_readmit = sample(year_range, size = 1500, replace = T)
)
View(readmit)
#simulate readmission
readmit = tibble(
patient_id = 1:1500,
readmit_number = floor(rnorm(1500, 8, 1.5)),
last_readmit = sample(year_range, size = 1500, replace = T)
)
View(readmit)
last_readmit = sample(year_range, 1500, replace = T)
#simulate readmission
readmit = tibble(
patient_id = 1:1500,
readmit_number = floor(rnorm(1500, 8, 1.5)),
last_readmit = last_readmit
)
View(readmit)
View(readmit)
year_start = ymd("2021-05-01")
year_end = ymd("2022-05-01")
year_range = seq.Date(year_start, year_end, by = "day")
last_readmit = sample(year_range, 1500, replace = T)
#simulate readmission
readmit = tibble(
patient_id = 1:1500,
readmit_number = floor(rnorm(1500, 8, 1.5)),
last_readmit = last_readmit
)
View(readmit)
write_csv(readmit, "readmission.csv")
View(diabetes_time)
library(shiny)
library(tidyverse)
diabetes_time = read_csv("a1c_time_series.csv")
diabetes = read_csv("diabetes_dataset.csv")
c(list(1), list(5))
View(diabetes_time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(diabetes_time)
names(diabetes_time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(diabetes_time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.Date()
Sys.Date() - months(6)
Sys.Date() - years(1)
runApp()
runApp()
View(diabetes_time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
min(diabetes_time$test_date)
Sys.Date() - months(6)
Sys.Date() - months(12)
runApp()
runApp()
runApp()
runApp()
runApp()
ntile(diabetes$hba1c_value)
ntile(diabetes$hba1c_value, 4)
test = diabetes %>% mutate(quartile = ntile(hba1c_value, 4))
View(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
readmit = read_csv("readmission.csv")
View(readmit)
ggplot(readmit)+geom_histogram(aes_string("last_readmit"))
runApp()
runApp()
View(readmit)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
